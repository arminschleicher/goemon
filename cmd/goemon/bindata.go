// Code generated by go-bindata.
// sources:
// assets/c.yml
// assets/md.yml
// assets/ruby.yaml
// assets/web.yml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\x70\x4f\xcd\x4b\x2d\x4a\x2c\x49\x4d\x51\x48\xaa\x54\x48\xcf\x4f\xcd\xcd\xcf\x53\xd0\x4d\xe7\x2a\x49\x2c\xce\x2e\xb6\xe2\xd2\x55\xc8\x4d\x2c\x49\xce\xb0\x52\x50\xd7\xd2\x4b\xae\x01\xe2\x82\x02\x10\x59\x51\xa1\xce\xa5\xa0\x90\x9c\x9f\x9b\x9b\x98\x97\x02\x54\xa6\xa0\x00\x52\x98\x9d\xca\x05\x08\x00\x00\xff\xff\xbf\xc3\x3b\x2b\x50\x00\x00\x00")

func cYmlBytes() ([]byte, error) {
	return bindataRead(
		_cYml,
		"c.yml",
	)
}

func cYml() (*asset, error) {
	bytes, err := cYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "c.yml", size: 80, mode: os.FileMode(438), modTime: time.Unix(1485408579, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mdYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8b\x41\x0b\x82\x30\x18\x86\xef\xfb\x15\x2f\x14\x08\xc1\xec\xee\x4d\x68\x89\x90\x0a\xe2\x5d\xd6\xb6\x14\xec\xdb\x17\x3a\x88\x88\xfd\xf7\x46\x47\x6f\x2f\xef\xf3\x3c\x07\x54\xce\xbb\x55\x07\x67\x71\xff\x60\x62\x47\xec\x21\x27\x11\xf4\xb6\x6c\x85\x90\x20\x1d\xcc\x5c\x20\x3b\xe5\x64\x33\x01\x18\x26\xd2\xde\x26\x06\x48\xbc\xd2\x64\x03\xf9\x48\xde\xba\x58\x7e\xa7\x38\x60\x0e\xf4\x84\x64\x1c\xbf\x55\xa7\x9a\xae\x1d\x87\xb2\xaf\xd4\x30\x5e\xea\x3e\x9e\xf7\x67\x5b\x36\x2a\xe6\xff\x64\x8f\xae\xf5\x4d\x45\xf1\x0b\x00\x00\xff\xff\xc1\x9c\xc3\x06\xa4\x00\x00\x00")

func mdYmlBytes() ([]byte, error) {
	return bindataRead(
		_mdYml,
		"md.yml",
	)
}

func mdYml() (*asset, error) {
	bytes, err := mdYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "md.yml", size: 164, mode: os.FileMode(438), modTime: time.Unix(1485408064, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rubyYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x8e\xcd\x4a\x03\x31\x14\x46\xf7\xf3\x14\x1f\x28\x14\x0a\x33\x11\x8a\x08\x59\x08\x05\xe3\x50\xb0\x2d\x94\xee\x4b\x66\x72\x9d\xa6\xe6\x07\x72\xa3\x50\x64\xde\xdd\xa0\x0b\xa1\x9d\x45\xb7\x97\xef\x9c\x7b\xee\xd0\x52\xa0\xa4\x33\x19\x74\x67\x0c\x91\x7c\x0c\xa8\x87\xca\xd9\x2f\x4a\xe4\xa2\x36\x12\x72\xf1\xf8\xb4\x78\xa8\xb2\xe6\x0f\x96\x55\x0d\xaf\x73\x7f\x94\x98\x35\x42\x33\x53\x66\x31\x6f\x4e\x3c\xab\x80\x3e\x7a\xaf\x83\x29\x23\xa0\xcc\x6c\xb0\xef\xe7\x13\xa3\xf6\xa8\x2d\xee\xbf\xdb\xad\x5a\x6f\x37\x87\xfd\x72\xd7\xaa\xfd\xe1\x75\xf5\xa6\x46\x3c\x5f\xdd\x5f\x56\xbb\x51\x5c\x1e\x37\xcb\xb5\x1a\x9b\x62\x2c\x9f\x7e\xe5\xf2\x3f\x10\x62\xba\xa9\xe7\x89\xa8\x1b\xb8\x63\xf6\xee\x76\x70\xde\xa4\xee\x7a\x3d\x44\x74\x9f\xd6\x99\x3f\x34\x11\x67\x9d\xf2\x84\xe7\x27\x00\x00\xff\xff\xd9\x0b\xad\xf8\x80\x01\x00\x00")

func rubyYamlBytes() ([]byte, error) {
	return bindataRead(
		_rubyYaml,
		"ruby.yaml",
	)
}

func rubyYaml() (*asset, error) {
	bytes, err := rubyYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ruby.yaml", size: 384, mode: os.FileMode(438), modTime: time.Unix(1485408584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _webYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x8e\xcd\x4a\x03\x31\x14\x46\xf7\xf3\x14\x1f\x28\x14\x0a\x33\x23\x14\x11\xb2\x10\x0a\xc6\xa1\x60\x5b\x28\xdd\x97\x74\x72\x4d\x53\xf3\x03\xb9\x51\x28\x32\xef\x6e\xd0\x85\xd0\xce\x62\xb6\x97\xef\x9c\x7b\xee\xd0\x51\xa0\xa4\x32\x69\x1c\x2f\x30\x91\x7c\x0c\xa8\x4d\xe5\xec\x17\x25\x72\x51\x69\x01\xb1\x78\x7c\x5a\x3c\x54\x59\xf1\x07\x8b\xaa\x86\x57\xb9\x3f\x09\xcc\x9a\x56\x31\x53\xe6\x76\xde\x9c\x79\x56\x01\x7d\xf4\x5e\x05\x5d\x46\x40\x99\xd9\x60\xdf\x2f\x67\x46\xed\x51\x5b\xdc\x7f\x77\x5b\xb9\xde\x6e\x0e\xfb\xe5\xae\x93\xfb\xc3\xeb\xea\x4d\x0e\x78\xbe\xb9\xbf\xac\x76\x43\x7b\x7d\xdc\x2c\xd7\x72\x68\x8a\xb1\x7c\xfa\x95\x8b\xff\x40\xb4\xe3\x4d\x3d\x8f\x44\x4d\xe0\x4e\xd9\xbb\xe9\xe0\xbc\x31\xf1\x76\x6d\x22\x8e\x9f\xd6\xe9\x3f\x34\x11\x67\x95\xf2\x88\xe7\x27\x00\x00\xff\xff\xad\x54\x7e\x5f\x80\x01\x00\x00")

func webYmlBytes() ([]byte, error) {
	return bindataRead(
		_webYml,
		"web.yml",
	)
}

func webYml() (*asset, error) {
	bytes, err := webYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web.yml", size: 384, mode: os.FileMode(438), modTime: time.Unix(1485408586, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"c.yml": cYml,
	"md.yml": mdYml,
	"ruby.yaml": rubyYaml,
	"web.yml": webYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"c.yml": &bintree{cYml, map[string]*bintree{}},
	"md.yml": &bintree{mdYml, map[string]*bintree{}},
	"ruby.yaml": &bintree{rubyYaml, map[string]*bintree{}},
	"web.yml": &bintree{webYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

