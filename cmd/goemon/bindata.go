// Code generated by go-bindata.
// sources:
// assets/c.yml
// assets/md.yml
// assets/ruby.yml
// assets/web.yml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\x70\x4f\xcd\x4b\x2d\x4a\x2c\x49\x4d\x51\x48\xaa\x54\x48\xcf\x4f\xcd\xcd\xcf\x53\xd0\x4d\xe7\x2a\x49\x2c\xce\x2e\xb6\xe2\xd2\x55\xc8\x4d\x2c\x49\xce\xb0\x52\x50\xd7\xd2\x4b\xae\xd1\xd2\x4b\x2e\x28\x00\x91\x15\x15\xea\x5c\x0a\x0a\xc9\xf9\xb9\xb9\x89\x79\x29\xc5\x56\x5c\x0a\x0a\x20\x85\xd9\xa9\x5c\x80\x00\x00\x00\xff\xff\xbf\xc3\x3b\x2b\x50\x00\x00\x00")

func cYmlBytes() ([]byte, error) {
	return bindataRead(
		_cYml,
		"c.yml",
	)
}

func cYml() (*asset, error) {
	bytes, err := cYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "c.yml", size: 80, mode: os.FileMode(438), modTime: time.Unix(1492942186, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mdYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\xcb\xc1\x0a\x82\x40\x10\x87\xf1\xfb\x3e\xc5\x1f\x0a\x84\x60\xec\xee\x4d\x68\x13\x21\x15\xc4\xbb\x4c\xee\xa6\x60\xb3\x13\xba\x10\x11\xbe\x7b\xd0\xd1\xeb\xf7\xf1\x3b\xa0\xf0\xc1\x2f\x1c\xbd\xc3\xfd\x83\x51\xbd\x68\x00\x8d\x26\xf2\x3a\xaf\x99\x21\x08\xc7\x61\xca\x90\x9c\x52\x71\x89\x01\x06\x15\xe1\xe0\xd6\xcc\x00\x84\x17\x07\xa7\x03\xe8\x01\xe1\x65\x76\xfa\x0e\xa0\x88\x29\xca\x13\xa4\x38\x7e\x8b\xc6\x56\x4d\xdd\x77\x79\x5b\xd8\xae\xbf\x94\xed\x76\xde\xc7\x3a\xaf\xec\x96\xfe\xc9\x7e\x5d\xcb\x9b\xdd\xcc\x2f\x00\x00\xff\xff\xc1\x9c\xc3\x06\xa4\x00\x00\x00")

func mdYmlBytes() ([]byte, error) {
	return bindataRead(
		_mdYml,
		"md.yml",
	)
}

func mdYml() (*asset, error) {
	bytes, err := mdYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "md.yml", size: 164, mode: os.FileMode(438), modTime: time.Unix(1492942186, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rubyYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x8e\xc1\x4a\xc3\x40\x14\x45\xf7\xf3\x15\x17\x14\x0a\x85\x99\x08\x45\x84\x59\x08\x05\x63\x28\xd8\x16\x4a\xf7\x65\x92\x3c\xd3\x89\x79\x33\x30\x6f\x14\x8a\xe4\xdf\x05\x5d\x08\x6d\x16\xd9\x5e\xee\x39\x9c\x3b\x54\x14\x28\xb9\x4c\x2d\xea\x0b\xba\x48\x1c\x03\x74\xa7\x06\xff\x45\x89\x86\xe8\x5a\x0b\xbb\x7a\x7c\x5a\x3d\xa8\xec\xe4\x43\xac\xd2\x60\x97\x9b\xb3\xc5\xc2\x14\x4e\x84\xb2\x14\x4b\xd3\xcb\x42\x01\x4d\x64\x76\xa1\x15\xab\x00\x0d\xf6\xc1\xbf\x5f\x7a\x81\x66\x68\x8f\xfb\xef\x6a\x5f\x6e\xf7\xbb\xd3\x71\x7d\xa8\xca\xe3\xe9\x75\xf3\x56\x8e\x78\xbe\xd9\x5f\x36\x87\xb1\xb8\x1e\x77\xeb\x6d\x39\x1a\xf6\xc1\xf4\xf2\x2b\xb7\xff\x81\x28\xa6\x9b\x1a\x99\x88\x9a\xc1\x9d\x33\x0f\xf3\xc1\xa5\x49\xf5\xed\xbb\x8b\xa8\x3f\xfd\xd0\xfe\xa1\x89\x24\xbb\x94\x27\x3c\xea\x27\x00\x00\xff\xff\xe8\xc1\x20\xcd\x81\x01\x00\x00")

func rubyYmlBytes() ([]byte, error) {
	return bindataRead(
		_rubyYml,
		"ruby.yml",
	)
}

func rubyYml() (*asset, error) {
	bytes, err := rubyYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ruby.yml", size: 385, mode: os.FileMode(438), modTime: time.Unix(1492944222, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _webYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x8e\xc1\x4a\x03\x31\x14\x45\xf7\xf9\x8a\x0b\x0a\x85\x42\x32\x42\x11\x21\x0b\xa1\xe0\x38\x14\x6c\x0b\xa5\xfb\x92\xce\x3c\xa7\x19\xf3\x12\xc8\x8b\x42\x91\xf9\x77\x41\x17\x42\x3b\x8b\x6e\x2f\xf7\x1c\xce\x1d\x1a\x8a\x94\x5d\xa1\x0e\xc7\x33\xfa\x44\x9c\x22\x74\xaf\x82\xff\xa2\x4c\x21\xb9\xce\xc2\x2e\x1e\x9f\x16\x0f\xaa\x38\xf9\x10\xab\x34\xd8\x95\xf6\x64\x31\x33\x95\x13\xa1\x22\xd5\xdc\x0c\x32\x53\x40\x9b\x98\x5d\xec\xc4\x2a\x40\x83\x7d\xf4\xef\xe7\x41\xa0\x19\xda\xe3\xfe\xbb\xd9\xd6\xeb\xed\xe6\xb0\x5f\xee\x9a\x7a\x7f\x78\x5d\xbd\xd5\x23\x9e\xaf\xf6\x97\xd5\x6e\xac\x2e\xc7\xcd\x72\x5d\x8f\x86\x7d\x34\x83\xfc\xca\xed\x7f\x20\xaa\xe9\xa6\x56\x26\xa2\x6e\xe0\x4e\x85\xc3\xed\xe0\xdc\xf4\xe9\xfa\xdd\x27\x1c\x3f\x7d\xe8\xfe\xd0\x4c\x52\x5c\x2e\x13\x9e\x9f\x00\x00\x00\xff\xff\xad\x54\x7e\x5f\x80\x01\x00\x00")

func webYmlBytes() ([]byte, error) {
	return bindataRead(
		_webYml,
		"web.yml",
	)
}

func webYml() (*asset, error) {
	bytes, err := webYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web.yml", size: 384, mode: os.FileMode(438), modTime: time.Unix(1492942186, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"c.yml": cYml,
	"md.yml": mdYml,
	"ruby.yml": rubyYml,
	"web.yml": webYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"c.yml": &bintree{cYml, map[string]*bintree{}},
	"md.yml": &bintree{mdYml, map[string]*bintree{}},
	"ruby.yml": &bintree{rubyYml, map[string]*bintree{}},
	"web.yml": &bintree{webYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

